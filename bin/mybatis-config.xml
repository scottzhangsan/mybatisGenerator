<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE configuration
PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-config.dtd">
<!--通过这个配置文件，完成mybatis与数据库的连接  -->
<configuration>
    <!--配置mybatis的log实现为LOG4J  -->
    <!-- 配置后，后台就会有sql语句的输出 -->
    <settings>
        <setting name="logImpl" value="LOG4J"/>
    </settings>
    <!-- 设置类的别名 -->
    <!-- <typeAliases>
        <typeAlias alias="User" type="com.wu.pojo.User"/>
        根据包取别名，把包下面的所有类都按类名来取别名
        这用可以简化代码量
        <package name="com.wu.pojo"/>
    </typeAliases> -->



    <environments default="development">
        <environment id="development">
            <!-- 配置事务管理 ，采用JDBC管理事务-->
            <transactionManager type="JDBC"/>
            <!-- POOLED是mybatis的 数据源 -->
            <!-- JNDI是基于tomcat的数据源 -->
            <dataSource type="UNPOOLED">
                <property name="driver" value="com.mysql.jdbc.Driver"/>
                <property name="url" value="jdbc:mysql://localhost:3306/jpa"/>
                <property name="username" value="root"/>
                <property name="password" value="123456"/>
            </dataSource>
        </environment>
    </environments>
    

    
    <!-- pojo的映射文件UserMapper引入到配入到配置文件中 mapper的加载方式1mapper和Java类在同一的包下 -->
    <mappers>
        <!-- resource要写成路径 -->
        <package  name="com.itdragon.mapper"/>
    </mappers>
    <!--2：mapper的xml文件直接放在resource目录下  -->
    
    <!--  <mappers>  
        使用这个方案，可以单独指定Mapper的位置  
        <mapper resource="mybatis/mappings/UserModelMapper.xml"/>  
        <mapper resource="mybatis/mappings/UserModelTwoMapper.xml"/>  
    </mappers>   -->
    
</configuration>